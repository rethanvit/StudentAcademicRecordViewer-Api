// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SRV.DL;

#nullable disable

namespace SRV.DL.Migrations
{
    [DbContext(typeof(StudentContext))]
    [Migration("20221115213748_InitialSchema")]
    partial class InitialSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SRV.DL.AcademicCalendarDetail", b =>
                {
                    b.Property<int>("AcademicCalendarDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicCalendarDetailId"), 1L, 1);

                    b.Property<int>("AcademicCalendarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("StopDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("AcademicCalendarDetailId");

                    b.HasIndex("AcademicCalendarId");

                    b.ToTable("AcademicCalendarDetails");
                });

            modelBuilder.Entity("SRV.DL.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("StopDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SRV.DL.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademicTermId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("MaxMarks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<int>("MinMarks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(40);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("StopDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("AcademicTermId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SRV.DL.EnrolledCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademicCalendarDetailId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<double>("Marks")
                        .HasColumnType("float");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicCalendarDetailId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("EnrolledCourses");
                });

            modelBuilder.Entity("SRV.DL.OfferedCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademicCalendarDetailId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicCalendarDetailId");

                    b.HasIndex("CourseId");

                    b.ToTable("OfferedCourses");
                });

            modelBuilder.Entity("SRV.DL.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("StopDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("SRV.DL.RefAcademicCalendar", b =>
                {
                    b.Property<int>("AcademicCalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicCalendarId"), 1L, 1);

                    b.Property<int>("AcademicTermId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademicCalendarId");

                    b.HasIndex("AcademicTermId");

                    b.ToTable("RefAcademicCalendars");
                });

            modelBuilder.Entity("SRV.DL.RefAcademicTerm", b =>
                {
                    b.Property<int>("AcademicTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicTermId"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Terms")
                        .HasColumnType("int");

                    b.HasKey("AcademicTermId");

                    b.ToTable("RefAcademicTerms");
                });

            modelBuilder.Entity("SRV.DL.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("StopDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SRV.DL.AcademicCalendarDetail", b =>
                {
                    b.HasOne("SRV.DL.RefAcademicCalendar", "RefAcademicCalendar")
                        .WithMany("AcademicCalendarDetails")
                        .HasForeignKey("AcademicCalendarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RefAcademicCalendar");
                });

            modelBuilder.Entity("SRV.DL.Course", b =>
                {
                    b.HasOne("SRV.DL.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SRV.DL.Organization", "Organization")
                        .WithMany("Courses")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("SRV.DL.Department", b =>
                {
                    b.HasOne("SRV.DL.RefAcademicTerm", "RefAcademicTerm")
                        .WithMany("Departments")
                        .HasForeignKey("AcademicTermId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SRV.DL.Organization", "Organization")
                        .WithMany("Departments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("RefAcademicTerm");
                });

            modelBuilder.Entity("SRV.DL.EnrolledCourse", b =>
                {
                    b.HasOne("SRV.DL.AcademicCalendarDetail", "AcademicCalendarDetail")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("AcademicCalendarDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SRV.DL.Course", "Course")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SRV.DL.Student", "Student")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcademicCalendarDetail");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SRV.DL.OfferedCourses", b =>
                {
                    b.HasOne("SRV.DL.AcademicCalendarDetail", "AcademicCalendarDetail")
                        .WithMany("OfferedCourses")
                        .HasForeignKey("AcademicCalendarDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SRV.DL.Course", "Course")
                        .WithMany("OfferedCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcademicCalendarDetail");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("SRV.DL.RefAcademicCalendar", b =>
                {
                    b.HasOne("SRV.DL.RefAcademicTerm", "RefAcademicTerm")
                        .WithMany("RefAcademicCalendars")
                        .HasForeignKey("AcademicTermId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RefAcademicTerm");
                });

            modelBuilder.Entity("SRV.DL.Student", b =>
                {
                    b.HasOne("SRV.DL.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SRV.DL.Organization", "Organization")
                        .WithMany("Students")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("SRV.DL.AcademicCalendarDetail", b =>
                {
                    b.Navigation("EnrolledCourses");

                    b.Navigation("OfferedCourses");
                });

            modelBuilder.Entity("SRV.DL.Course", b =>
                {
                    b.Navigation("EnrolledCourses");

                    b.Navigation("OfferedCourses");
                });

            modelBuilder.Entity("SRV.DL.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SRV.DL.Organization", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Departments");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SRV.DL.RefAcademicCalendar", b =>
                {
                    b.Navigation("AcademicCalendarDetails");
                });

            modelBuilder.Entity("SRV.DL.RefAcademicTerm", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("RefAcademicCalendars");
                });

            modelBuilder.Entity("SRV.DL.Student", b =>
                {
                    b.Navigation("EnrolledCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
